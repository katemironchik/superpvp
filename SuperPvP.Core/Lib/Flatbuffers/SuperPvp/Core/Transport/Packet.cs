// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SuperPvp.Core.Transport
{

using global::System;
using global::FlatBuffers;

public struct Packet : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Packet GetRootAsPacket(ByteBuffer _bb) { return GetRootAsPacket(_bb, new Packet()); }
  public static Packet GetRootAsPacket(ByteBuffer _bb, Packet obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Packet __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ulong TickId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public PacketType Type { get { int o = __p.__offset(6); return o != 0 ? (PacketType)__p.bb.GetSbyte(o + __p.bb_pos) : PacketType.Undefined; } }
  public ObjectChange? Data(int j) { int o = __p.__offset(8); return o != 0 ? (ObjectChange?)(new ObjectChange()).__assign(__p.__vector(o) + j * 16, __p.bb) : null; }
  public int DataLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Packet> CreatePacket(FlatBufferBuilder builder,
      ulong tickId = 0,
      PacketType type = PacketType.Undefined,
      VectorOffset dataOffset = default(VectorOffset)) {
    builder.StartObject(3);
    Packet.AddTickId(builder, tickId);
    Packet.AddData(builder, dataOffset);
    Packet.AddType(builder, type);
    return Packet.EndPacket(builder);
  }

  public static void StartPacket(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddTickId(FlatBufferBuilder builder, ulong tickId) { builder.AddUlong(0, tickId, 0); }
  public static void AddType(FlatBufferBuilder builder, PacketType type) { builder.AddSbyte(1, (sbyte)type, 0); }
  public static void AddData(FlatBufferBuilder builder, VectorOffset dataOffset) { builder.AddOffset(2, dataOffset.Value, 0); }
  public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(16, numElems, 4); }
  public static Offset<Packet> EndPacket(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Packet>(o);
  }
  public static void FinishPacketBuffer(FlatBufferBuilder builder, Offset<Packet> offset) { builder.Finish(offset.Value); }
};


}
