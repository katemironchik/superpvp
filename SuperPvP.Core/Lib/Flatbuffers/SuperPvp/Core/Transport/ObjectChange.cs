// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SuperPvp.Core.Transport
{

using global::System;
using global::FlatBuffers;

public struct ObjectChange : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public ObjectChange __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { return __p.bb.GetInt(__p.bb_pos + 0); } }
  public ObjectType Type { get { return (ObjectType)__p.bb.GetSbyte(__p.bb_pos + 4); } }
  public Position Position { get { return (new Position()).__assign(__p.bb_pos + 8, __p.bb); } }

  public static Offset<ObjectChange> CreateObjectChange(FlatBufferBuilder builder, int Id, ObjectType Type, int position_I, int position_J) {
    builder.Prep(4, 16);
    builder.Prep(4, 8);
    builder.PutInt(position_J);
    builder.PutInt(position_I);
    builder.Pad(3);
    builder.PutSbyte((sbyte)Type);
    builder.PutInt(Id);
    return new Offset<ObjectChange>(builder.Offset);
  }
};


}
